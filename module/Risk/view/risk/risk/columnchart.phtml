<script type="text/javascript" src="/js/mygraph.js"></script>
<link type="text/css" href="/css/mygraph.css" rel="stylesheet">

<?php
echo $this->headScript()
        ->prependFile($this->basePath() . '/js/d3.js')
?>
<section class="edit">            
    <?php
    $title = 'Graphs ' . $this->title;
    $this->headTitle('SIGERI - ' . $title);
    ?>

    <h2><?php echo $this->escapeHtml($title); ?></h2>
    <?php echo $this->data2 ?>

        <div id="columnchart01">          
            <style>
                .column {
                    fill: steelblue;
                    stroke: 4px #CCC;
                }
    
                .column:hover {
                    fill: brown;
                }
            </style>
    
            <script type="text/javascript">
                // columnChart(destiny div, json link, external links, labels, yLabel) 
                columnChart("columnchart01", "/risk/jsonRiskData", "/risk/view/", 1, "likelihood x impact");
            </script>
        </div>



    <div id="multicolumnchart01">          
        <style>
            .column a:visited {
               fill: #CCC;
            }
        </style>

        <script type="text/javascript">
            // columnChart(destiny div, json link, list of fields, external links, labels, yLabel) 
            multicolumnChart("multicolumnchart01", "/risk/jsonRiskData", ["impact", "likelihood"], "/risk/view/", 1, "likelihood x impact");
        </script>
    </div>


    <p>  </p>
    <div id="areachart1" class="areachart">            

        <svg class="columnchart2"></svg>
        <script type="text/javascript">
            var tooltip = d3.select("body").append("div")
                    .attr("class", "tooltip");

            var margin = {top: 20, right: 2, bottom: 5, left: 20};

            var width = $("#areachart1").width() - margin.left - margin.right,
                    height = width / 3 - margin.top - margin.bottom;

            var x = d3.scale.ordinal().rangeRoundBands([0, width], .1);
            var y = d3.scale.linear().rangeRound([height, 0]);

            var xAxis = d3.svg.axis()
                    .scale(x)
                    .orient("bottom");

            var yAxis = d3.svg.axis()
                    .scale(y)
                    .orient("left")
                    .ticks(10, "%");


            var columnchart2 = d3.select(".columnchart2")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            d3.json("/risk/jsonRiskData", function (data) {

                x.domain(data.map(function (d) {
                    return d.name;
                }));

                y.domain([0, d3.max(data, function (d) {
                        return d.impact + d.likelihood;
                    })]);

                // Convert JSON data to stack format 
                var stack = d3.layout.stack();

                var fields = d3.keys(data[0])
                        .filter(function (key) {
                            return (key === "impact" || key === "likelihood");
                        });


                var name = data.map(function (d) {
                    return d.name;
                });

                var dataset = stack(d3.range(fields.length).map(function (d) {
                    var a = [];
                    for (var i = 0; i < data.length; ++i) {
                        a[i] = {x: i, y: data[i][fields[d]]};
                    }
                    return a;
                }));

                var xScale = d3.scale.ordinal()
                        .domain(d3.range(dataset[0].length))
                        .rangeRoundBands([0, width], 0.05);


                var yScale = d3.scale.linear()
                        .domain([0, d3.max(dataset, function (d) {
                                return d3.max(d, function (d) {
                                    return parseInt(d.y0) + parseInt(d.y);
                                });
                            })
                        ]).range([height, 0]);

                var colors = d3.scale.category10();

                // Add a group for each row of data
                var groups = columnchart2.selectAll("g")
                        .data(dataset)
                        .enter()
                        .append("g")
                        .style("fill", function (d, i) {
                            return colors(i);
                        });

                // Add a rect for each data value
                var rects = groups.selectAll("rect")
                        .data(function (d) {
                            return d;
                        })
                        .enter()
                        .append("a")
                        .attr("xlink:href", function (d, i) {
                            return "/risk/edit/" + data[i].id;
                        })
                        .append("rect")
                        .attr("x", function (d, i) {
                            return xScale(i);
                        })
                        .attr("y", function (d) {
                            //console.log(parseInt(d.y0 + d.y));
                            return yScale(parseInt(d.y0) + parseInt(d.y));
                        })
                        .attr("height", function (d) {
                            return height - yScale(d.y);
                        })
                        .attr("width", xScale.rangeBand())
                        .on("mouseover", function (d, i) {
                            tooltip.transition()
                                    .duration(200)
                                    .style("opacity", 1);
                            tooltip.html(
                                    "Likelihood: " + data[i].likelihood +
                                    "</br>Impact: " + data[i].impact)
                                    .style("left", (d3.event.pageX) + "px")
                                    .style("top", (d3.event.pageY - 40) + "px");
                        })
                        .on("mouseout", function (d) {
                            tooltip.transition()
                                    .duration(500)
                                    .style("opacity", 0);
                        });

                var xAxis = d3.svg.axis()
                        .scale(x)
                        .orient("bottom");

                var yAxis = d3.svg.axis()
                        .scale(yScale)
                        .orient("left");

                columnchart2.append("g")
                        .attr("class", "x axis")
                        .attr("transform", "translate(0," + height + ")")
                        .call(xAxis);

                columnchart2.append("g")
                        .attr("class", "y axis")
                        .call(yAxis)
                        .append("text")
                        .attr("transform", "rotate(-90)")
                        .attr("y", 6)
                        .attr("dy", ".70em")
                        .style("text-anchor", "end")
                        .text("Impact + Likelihood");



            });



//            function type(d) {
//                d.value = +d.value; // coerce to number
//                return d;
//            }

        </script>
    </div>
</section>


