<!-- <script src="" type="text/javascript" /> -->
<?php
echo $this->headScript()
        ->prependFile($this->basePath() . '/js/d3.js')
?>
<section class="edit">
    <div class="row">
        <div class="col-md-8">                   
            <?php
            $title = 'Graphs ' . $this->title;
            $this->headTitle('SIGERI - ' . $title);
            ?>

            <h2><?php echo $this->escapeHtml($title); ?></h2>
            <?php echo $this->data2 ?>

            <div class="xychart">
                <label><input type="checkbox" id="show_label" checked="true"> Show labels</label>
                <svg id="matrix"></svg>

                <style>
                    .axis text {
                        font-size: 0.9em sans-serif;
                    }

                    .axis path, .axis line {
                        fill: none;
                        stroke: #000;
                        shape-rendering: crispEdges;
                    }

                    .circle {
                        stroke: #000;
                        stroke-opacity: 1;
                        fill-opacity: 1;
                    }
                    text {
                        font-size: 0.9em;
                    }

                    .tooltip {   
                        position: absolute;           
                        text-align: left;           
                        //width: 80px;                  
                        //height: 35px;                 
                        padding: 10px;             
                        font: 11px sans-serif;        
                        background: white;   
                        border: 0px;      
                        border-radius: 3px;           
                        pointer-events: none;
                        box-shadow: 1px 1px 2px #CCC;

                    }
                    label {
                        width: 100%;
                        text-align: right;
                        //position: absolute;
                        top: 20px;
                        right: 15px;
                        border: 0;
                        padding: 0;
                    }

                    .xychart {
                        border: solid 1px #ccc;
                        /* position: absolute; */
                        width: 740px;
                        padding: 9px;
                        border-radius: 5px;
                        /* display: block; */
                    }

                </style>

                <script type="text/javascript">
                    var margin = {top: 20, right: 20, bottom: 30, left: 40},
                    width = 720 - margin.left - margin.right,
                            height = 400 - margin.top - margin.bottom;

                    var radius = 5,
                            padding = 1,
                            alpha_X = 1;

                    var color = d3.scale.category10();

                    var svg = d3.select("#matrix")
                            .attr("width", width + margin.left + margin.right)
                            .attr("height", height + margin.top + margin.bottom)
                            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    var force = d3.layout.force()
                            .charge(-50)
                            .gravity(0)
                            .chargeDistance(20)
                            .size([width, height]);

                    //                var gradient = svg.append("radialGradient")
                    //                        .attr("cx", "0%")
                    //                        .attr("cy", "100%")
                    //                        .attr("r", "100%")
                    //                        .attr("id", "gradient")
                    //                        .attr("spreadMethod", "pad")
                    //                        .attr("gradientUnits", "userSpaceOnUse")
                    //                        ;

                    var gradient = svg.append("linearGradient")
                            .attr("y1", "100%")
                            .attr("y2", "0%")
                            .attr("x1", "0%")
                            .attr("x2", "100%")
                            .attr("id", "gradient")
                            .attr("spreadMethod", "pad")
                            //                        .attr("gradientUnits", "userSpaceOnUse")
                            ;

                    gradient
                            .append("stop")
                            .attr("offset", "0%")
                            .attr("stop-color", "#0F0");

                    gradient
                            .append("stop")
                            .attr("offset", "50%")
                            .attr("stop-color", "#FF0");

                    gradient
                            .append("stop")
                            .attr("offset", "100%")
                            .attr("stop-color", "#F00");

                    svg.append("svg:rect")
                            .attr("width", width + margin.left + margin.right)
                            .attr("height", height + margin.top + margin.bottom)
                            .style("fill", "url(#gradient)");

                    d3.json("jsonData", function (data) {

                        var maxX = d3.max(data, function (d) {
                            return d.impact;
                        });

                        var maxY = d3.max(data, function (d) {
                            return d.likelihood;
                        });

                        var xPos = d3.scale.linear()
                                .domain([0, maxX])
                                .range([0, width]);

                        var yPos = d3.scale.linear()
                                .domain([0, maxY])
                                .range([height, 0]);


                        // Axis 
                        var xAxis = d3.svg.axis()
                                .scale(xPos)
                                .orient("bottom");

                        var yAxis = d3.svg.axis()
                                .scale(yPos)
                                .orient("left");

                        svg.append("g")
                                .attr("transform", "translate(" + margin.left + "," + (height + margin.top) + ")")
                                .attr("class", "axis")
                                .call(xAxis)
                                .append("text")
                                .attr("x", width)
                                .attr("dy", "-1em")
                                .style("text-anchor", "end")
                                .text("Likelihood");
                        ;

                        svg.append("g")
                                .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
                                .attr("class", "axis")
                                .call(yAxis)
                                .append("text")
                                .attr("transform", "rotate(-90)")
                                .attr("y", 8)
                                .attr("dy", "1em")
                                .style("text-anchor", "end")
                                .text("Impact");

                        // Tip Text
                        var tooltip = d3.select("body").append("div")
                                .attr("class", "tooltip");


                        var text = svg.selectAll("text.node")
                                .data(data).enter()
                                .append("svg:text")
                                .text(function (d) {
                                    return d.name;
                                })
                                //                            .style("opacity", 0.5)
                                ;

                        // Controls
                        // var control = svg.append()


                        var node = svg.selectAll("circle.node")
                                .data(data).enter()
                                .append("a")
                                .attr("xlink:href", function (d) {
                                    return "/risk/edit/" + d.id;
                                })
                                .append("svg:circle")
                                .attr("r", function (d) {
                                    return radius;
                                })
                                .attr("class", "circle")
                                .attr("fill", function (d) {
                                    return color(d.impact);
                                })
                                //                            .style("opacity", 0.5)
                                .call(force.drag)
                                .on("mouseover", function (d) {
                                    tooltip.transition()
                                            .duration(200)
                                            .style("opacity", 1);
                                    tooltip.html(
                                            "Risk: " + d.name +
                                            "</br>Impact: " + d.impact +
                                            "<br/>Likelihood: " + d.likelihood)
                                            .style("left", (d3.event.pageX + radius * 2) + "px")
                                            .style("top", (d3.event.pageY - 28) + "px");
                                })
                                .on("mouseout", function (d) {
                                    tooltip.transition()
                                            .duration(500)
                                            .style("opacity", 0);
                                })
                                ;

                        force
                                .nodes(data)
                                .on("tick", tick)
                                .start();


                        // Set initial positions
                        data.forEach(function (d) {
                            d.x = xPos(d.likelihood) - radius;
                            d.y = yPos(d.impact) + radius;
                            //d.color = color(d.impact);
                            d.radius = radius;
                        });

                        function tick(e) {
                            node.each(moveTowardDataPosition(e.alpha));
                            node.each(collide(e.alpha));
                            node
                                    .attr("cx", function (d) {
                                        return d.x + margin.left;
                                    })
                                    .attr("cy", function (d) {
                                        return d.y + margin.top;
                                    })
                                    ;
                            text
                                    .attr("x", function (d) {
                                        return d.x + 3 + radius + margin.left;
                                    })
                                    .attr("y", function (d) {
                                        return d.y + radius + margin.top;
                                    });
                        }

                        function moveTowardDataPosition(alpha) {
                            return function (d) {
                                d.x += (xPos(d.likelihood) - d.x) * alpha_X * alpha;
                                d.y += (yPos(d.impact) - d.y) * alpha_X * alpha;
                            };
                        }

                        function collide(alpha) {
                            var quadtree = d3.geom.quadtree(data);
                            return function (d) {
                                var r = d.radius + r + padding,
                                        nx1 = d.x - r,
                                        nx2 = d.x + r,
                                        ny1 = d.y - r,
                                        ny2 = d.y + r;
                                quadtree.visit(function (quad, x1, y1, x2, y2) {
                                    if (quad.point && (quad.point !== d)) {
                                        var x = d.x - quad.point.x,
                                                y = d.y - quad.point.y,
                                                l = Math.sqrt(x * x + y * y),
                                                r = d.radius + quad.point.radius + (d.color !== quad.point.color) * padding;
                                        if (l < r) {
                                            l = (l - r) / l * alpha;
                                            d.x -= x *= l;
                                            d.y -= y *= l;
                                            quad.point.x += x;
                                            quad.point.y += y;
                                        }
                                    }
                                    return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
                                });
                            };
                        }

                        d3.select("#show_label").on("change", function () {
                            opacity = this.checked ? 1 : 0;
                            text
                                    .transition()
                                    .duration(750)
                                    .attr("opacity", opacity);
                        });

                    });



                </script>

            </div>

            <div class="chart"></div>

            <style>
                .chart div {
                    font: 10px sans-serif;
                    background-color: steelblue;
                    text-align: right;
                    padding: 3px;
                    margin: 1px;
                    color: white;
                }
            </style>

            <script type="text/javascript">
                d3.json("jsonData", function (data) {
                    var max_n = 0;
                    for (var d in data) {
                        max_n = Math.max(data[d].likelihood, max_n);
                    }
                    ;
                    var x = d3.scale.linear()
                            .domain([0, max_n])
                            .range([0, 720]);

                    d3.select(".chart")
                            .selectAll("div")
                            .data(data)
                            .enter().append("div")
                            .style("width", function (d) {
                                return x(d.likelihood) + "px";
                            })
                            .text(function (d) {
                                return d.name;
                            });
                });</script>

            <p></p><!--


            -->            <p> ---- </p>


            <svg class="chartbar"></svg>

            <style>

                .chartbar .bar:hover {
                    fill: brown;
                }

                .chartbar .axis text {
                    font: 10px sans-serif;
                }

                .chartbar .axis path, .axis line {
                    fill: none;
                    stroke: #000;
                    shape-rendering: crispEdges;
                }

                .chartbar .x.axis path {          
                    display: none;
                }
            </style>

            <script type="text/javascript">

                var margin = {top: 20, right: 30, bottom: 30, left: 40},
                width = 720 - margin.left - margin.right,
                        height = 400 - margin.top - margin.bottom;

                /*var x = d3.scale.ordinal().rangeRoundBands([0, width], .1);
                 var y = d3.scale.linear().range([height, 0]);
                 
                 var xAxis = d3.svg.axis()
                 .scale(x)
                 .orient("bottom");
                 
                 var yAxis = d3.svg.axis()
                 .scale(y)
                 .orient("left")
                 .ticks(10, "%");
                 */

                var chartbar = d3.select(".chartbar")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                        .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                d3.json("jsonData", function (data) {

                    // Convert JSON data to stack format 
                    var stack = d3.layout.stack();

                    var fields = d3.keys(data[0])
                            .filter(function (key) {
                                return (key !== "name" && key !== "id");
                            });

                    var name = data.map(function (d) {
                        return d.name;
                    });

                    var dataset = stack(d3.range(fields.length).map(function (d) {
                        var a = [];
                        for (var i = 0; i < data.length; ++i) {
                            a[i] = {x: i, y: data[i][fields[d]]};
                        }
                        return a;
                    }));


                    var xScale = d3.scale.ordinal()
                            .domain(d3.range(dataset[0].length))
                            .rangeRoundBands([0, width], 0.05);

                    var yScale = d3.scale.linear()
                            .domain([0, d3.max(dataset, function (d) {
                                    return d3.max(d, function (d) {
                                        return d.y0 + d.y;
                                    });
                                })
                            ]).range([0, height]);

                    var colors = d3.scale.category10();

                    // Add a group for each row of data
                    var groups = chartbar.selectAll("g")
                            .data(dataset)
                            .enter()
                            .append("g")
                            .style("fill", function (d, i) {
                                return colors(i);
                            });

                    // Add a rect for each data value
                    var rects = groups.selectAll("rect")
                            .data(function (d) {
                                return d;
                            })
                            .enter()
                            .append("rect")
                            .attr("x", function (d, i) {
                                return xScale(i);
                            })
                            .attr("y", function (d) {
                                return yScale(d.y0);
                            })
                            .attr("height", function (d) {
                                return yScale(d.y);
                            })
                            .attr("width", xScale.rangeBand());

                });

                function type(d) {
                    d.value = +d.value; // coerce to number
                    return d;
                }

            </script><!--


            -->            <p>----</p>

            <svg class="chartcircle"></svg>

            <style>
                .bar {
                    fill: steelblue;
                }

                .bar:hover {
                    fill: brown;
                }

                .axis text {
                    font: 10px sans-serif;
                }

                .axis path, .axis line {
                    fill: none;
                    stroke: #000;
                    shape-rendering: crispEdges;
                }

                .x.axis path {          
                    display: none;
                }
            </style>

            <script type="text/javascript">

                var margin = {top: 20, right: 30, bottom: 30, left: 40},
                width = 720 - margin.left - margin.right,
                        height = 400 - margin.top - margin.bottom;

                var x = d3.scale.ordinal().rangeRoundBands([0, width], .1);
                var y = d3.scale.linear().range([height, 0]);

                var xAxis = d3.svg.axis()
                        .scale(x)
                        .orient("bottom");

                var yAxis = d3.svg.axis()
                        .scale(y)
                        .orient("left")
                        .ticks(10, "%");

                var chart = d3.select(".chartcircle")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                        .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                d3.json("jsonData", function (data) {
                    x.domain(data.map(function (d) {
                        return d.name;
                    }));

                    y.domain([0, d3.max(data, function (d) {
                            return d.impact;
                        })]);

                    chart.append("g")
                            .attr("class", "x axis")
                            .attr("transform", "translate(0," + height + ")")
                            .call(xAxis);

                    chart.append("g")
                            .attr("class", "y axis")
                            .call(yAxis)
                            .append("text")
                            .attr("transform", "rotate(-90)")
                            .attr("y", 6)
                            .attr("dy", ".70em")
                            .style("text-anchor", "end")
                            .text("Frequency");

                    chart.selectAll(".bar")
                            .data(data)
                            .enter().append("a")
                            .attr("xlink:href", function (d) {
                                return "/risk/edit/" + d.id;
                            })
                            .append("rect")
                            .attr("class", "bar")
                            .attr("x", function (d) {
                                return x(d.name);
                            })
                            .attr("y", function (d) {
                                return y(d.impact);
                            })
                            .attr("height", function (d) {
                                return height - y(d.impact);
                            })
                            .attr("width", x.rangeBand())
                            .on("click", function (d) {
                                console.log(d.id);
                            });

                });

                function type(d) {
                    d.value = +d.value; // coerce to number
                    return d;
                }

            </script>




            <!--
            <svg class="chartx"></svg><p>
                                    
            <script type="text/javascript">						
                    var dataset = <?php echo $this->data2 ?>;

                    var w = 720,
                        h = 520,
                        barPadding = 1,
                        n = 2;
                
                var stack = d3.layout.stack();
                var layers = stack(d3.range(n).map(function() { 
                                                    return d3.values(dataset); }));


                dataset.forEach(function (d) {
                      var y0 = 0;
                      d.mapping = d3.range(n).map(function (name) {
                              return {
                                      name: name,
                                      label: d[name],
                                      y0: y0,
                                      y1: y0 += +d[name]};
                              });
                      d.total = d.mapping[d.mapping.length - 1].y1;
                    });
            
                console.log(dataset);

                var x = d3.scale.ordinal()
                    .rangeRoundBands([0, w], .1);

            var y = d3.scale.linear()
                    .rangeRound([h, 0]);

                    //Create SVG element
                    
                    var color = d3.scale.linear()
                        .domain([0, n - 1])
                        .range(["#aad", "#556"]);
            

                    var svg = d3.select(".chartx")
                        .attr("width", w )
                        .attr("height", h )
                        .append("g")
                        .attr("transform", "translate( 10, 10)");;
            
                    var layer = svg.selectAll(".layer")
                        .data(layers)
                        .enter()
                        .append("g")
                        .attr("class", "layer")
                        .style("fill", function(d, i) { return color(i); });

                    var rect = layer.selectAll("rect")
                        .data(function(d) { return d; })
                        .enter()
                        .append("rect")
                        .attr("width", x.rangeBand())
                    .attr("y", function (d) { return y(d.y1); })
                    .attr("height", function (d) { return y(d.y0) - y(d.y1); })

                svg.selectAll("text")
                            .data(dataset)
                            .enter()
                            .append("text")
                            .text(function(d){ return d.name })
                            .attr("x", function(d, i) { return (i * (w / dataset.length ) + (w / dataset.length) / 2)  ; })
                            .attr("y", function(d) {	return h - (d.likelihood * 1) + 15; })
                            .attr("text-anchor", "middle");
            </script>
            
            <svg class="chart"></svg><p>
                                    
            <script type="text/javascript">						
                    var dataset = <?php echo $this->data2 ?>;

                    var w = 720;
                    var h = 520;
                    var barPadding = 1;

                    //Create SVG element
                    
                    var svg = d3.select(".chart")
                                            .attr("width", w)
                                            .attr("height", h);

                    
                       
                    svg.selectAll("rect")
                       .data(dataset)
                       .enter()
                       
                       .append("rect")
                       .attr("x", function(d, i) { return i * (w / dataset.length); })
                       .attr("y", function(d) {	return h - (d.likelihood * 1); })
                       .attr("width", w / dataset.length - barPadding)
                       .attr("height", function(d) { return d.likelihood * 1; })
                       .attr("fill", "brown")
                       
                    svg.selectAll("text")
                            .data(dataset)
                            .enter()
                            .append("text")
                            .text(function(d){ return d.name })
                            .attr("x", function(d, i) { return (i * (w / dataset.length ) + (w / dataset.length) / 2)  ; })
                            .attr("y", function(d) {	return h - (d.likelihood * 1) + 15; })
                            .attr("text-anchor", "middle");
            </script>
            
            
            <!--<svg class="chart"></svg>
                                    
             <script type="text/javascript">						
                    var dataset = <?php echo $this->data2 ?>;

                    function likelihood(d){ console.log(d); return d.likelihood.value; };
                    function threat(d){ console.log(d); return d.threat.value; };
                    //likelihood(dataset[3]);

                    var w = 520;
                    var h = 550;

                    //Create SVG element
                    var svg = d3.select("body")
                                            .append("svg")
                                            .attr("width", w)
                                            .attr("height", h);

                    var circles = svg.selectAll("circle")
                        .data(dataset)
                        .enter()
                        .append("circle");

                    circles.attr("cx", function(d, i) {
                                            return (i * 100) + 25;
                                    })
                               .attr("cy", h/2)
                               .attr("r", function(d) {
                                        console.log(d.likelihood.value);
                                            return d.likelihood.value / 2;
                               });
                    
            </script>
            -->		
            <p>
                <?php //var_dump($this->results);?>

<!-- <svg class="chart2"></svg> 

                <script type="text/javascript">
                    var dataset = <?php echo $this->data ?>;
                    var width = 520;
                    var height = 350;
                    var x = d3.scale.linear()
                            .domain([0, d3.max(dataset["values"])])
                            .range([0, width]);
                    var chart = d3.select(".chart2")
                            .attr("width", width)
                            .attr("height", height);
                    var bar = chart.selectAll("g")
                            .data(dataset["values"])
                            .enter()
                            .append("g")
                            .attr("transform", function (d, i) {
                                return "translate(0," + i * (height / 14) + ")";
                            });
                    var xAxis = d3.svg.axis()
                            .scale(x)
                            .orient("bottom");
                    bar.append("rect")
                            .attr("width", x)
                            .attr("height", (height / 14) - 1)
                            .attr("fill", function (d) {
                                return "rgb(0,150," + (d * 2) + ")";
                            });
                    bar.append("text")
                            .attr("x", function (d) {
                                return x(d) - 3;
                            })
                            .attr("y", function (d) {
                                return (height / 14) / 2
                            })
                            .attr("dy", ".35em")
                            .text(function (d) {
                                return d[0];
                            });
                    chart.append("g")
                            .attr("class", "axis")
                            .attr("transform", "translate(0," + (height - 15) + ")")
                            .call(xAxis);</script>		


            <style>

                body {
                    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
                    margin: auto;
                    position: relative;
                    width: 960px;
                }

                text {
                    font: 10px sans-serif;
                }

                .axis path,
                .axis line {
                    fill: none;
                    stroke: #000;
                    shape-rendering: crispEdges;
                }

                form {
                    position: absolute;
                    right: 10px;
                    top: 10px;
                }

            </style>
            <form>
                <label><input type="radio" name="mode" value="grouped"> Grouped</label>
                <label><input type="radio" name="mode" value="stacked" checked> Stacked</label>
            </form>
            <script src="http://d3js.org/d3.v3.min.js"></script>
            <script>

                    var n = 4, // number of layers
                            m = 58, // number of samples per layer
                            stack = d3.layout.stack(),
                            layers = stack(d3.range(n).map(function () {
                                return bumpLayer(m, .1);
                            })),
                            yGroupMax = d3.max(layers, function (layer) {
                                return d3.max(layer, function (d) {
                                    return d.y;
                                });
                            }),
                            yStackMax = d3.max(layers, function (layer) {
                                return d3.max(layer, function (d) {
                                    return d.y0 + d.y;
                                });
                            });
                    console.log(layers);
                    var margin = {top: 40, right: 10, bottom: 20, left: 10},
                    width = 960 - margin.left - margin.right,
                            height = 500 - margin.top - margin.bottom;
                    var x = d3.scale.ordinal()
                            .domain(d3.range(m))
                            .rangeRoundBands([0, width], .08);
                    var y = d3.scale.linear()
                            .domain([0, yStackMax])
                            .range([height, 0]);
                    var color = d3.scale.linear()
                            .domain([0, n - 1])
                            .range(["#aad", "#556"]);
                    var xAxis = d3.svg.axis()
                            .scale(x)
                            .tickSize(0)
                            .tickPadding(6)
                            .orient("bottom");
                    var svg = d3.select("body").append("svg")
                            .attr("width", width + margin.left + margin.right)
                            .attr("height", height + margin.top + margin.bottom)
                            .append("g")
                            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                    var layer = svg.selectAll(".layer")
                            .data(layers)
                            .enter().append("g")
                            .attr("class", "layer")
                            .style("fill", function (d, i) {
                                return color(i);
                            });
                    var rect = layer.selectAll("rect")
                            .data(function (d) {
                                return d;
                            })
                            .enter().append("rect")
                            .attr("x", function (d) {
                                return x(d.x);
                            })
                            .attr("y", height)
                            .attr("width", x.rangeBand())
                            .attr("height", 0);
                    rect.transition()
                            .delay(function (d, i) {
                                return i * 10;
                            })
                            .attr("y", function (d) {
                                return y(d.y0 + d.y);
                            })
                            .attr("height", function (d) {
                                return y(d.y0) - y(d.y0 + d.y);
                            });
                    svg.append("g")
                            .attr("class", "x axis")
                            .attr("transform", "translate(0," + height + ")")
                            .call(xAxis);
                    d3.selectAll("input").on("change", change);
                    var timeout = setTimeout(function () {
                        d3.select("input[value=\"grouped\"]").property("checked", true).each(change);
                    }, 2000);
                    function change() {
                        clearTimeout(timeout);
                        if (this.value === "grouped")
                            transitionGrouped();
                        else
                            transitionStacked();
                    }

                    function transitionGrouped() {
                        y.domain([0, yGroupMax]);
                        rect.transition()
                                .duration(500)
                                .delay(function (d, i) {
                                    return i * 10;
                                })
                                .attr("x", function (d, i, j) {
                                    return x(d.x) + x.rangeBand() / n * j;
                                })
                                .attr("width", x.rangeBand() / n)
                                .transition()
                                .attr("y", function (d) {
                                    return y(d.y);
                                })
                                .attr("height", function (d) {
                                    return height - y(d.y);
                                });
                    }

                    function transitionStacked() {
                        y.domain([0, yStackMax]);
                        rect.transition()
                                .duration(500)
                                .delay(function (d, i) {
                                    return i * 10;
                                })
                                .attr("y", function (d) {
                                    return y(d.y0 + d.y);
                                })
                                .attr("height", function (d) {
                                    return y(d.y0) - y(d.y0 + d.y);
                                })
                                .transition()
                                .attr("x", function (d) {
                                    return x(d.x);
                                })
                                .attr("width", x.rangeBand());
                    }

                    // Inspired by Lee Byron's test data generator.
                    function bumpLayer(n, o) {

                        function bump(a) {
                            var x = 1 / (.1 + Math.random()),
                                    y = 2 * Math.random() - .5,
                                    z = 10 / (.1 + Math.random());
                            for (var i = 0; i < n; i++) {
                                var w = (i / n - y) * z;
                                a[i] += x * Math.exp(-w * w);
                            }
                        }

                        var a = [], i;
                        for (i = 0; i < n; ++i)
                            a[i] = o + o * Math.random();
                        for (i = 0; i < 5; ++i)
                            bump(a);
                        return a.map(function (d, i) {
                            return {x: i, y: Math.max(0, d)};
                        });
                    }

            </script>


        </div>
        <div class="col-md-4">
        </div>
    </div>
</section>