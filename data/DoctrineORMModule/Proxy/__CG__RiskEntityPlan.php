<?php

namespace DoctrineORMModule\Proxy\__CG__\Risk\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Plan extends \Risk\Entity\Plan implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'name', 'status', 'strategy', 'effort', 'analyst', 'description', 'annotations', 'date', 'revisions', 'submit');
        }

        return array('__isInitialized__', 'id', 'name', 'status', 'strategy', 'effort', 'analyst', 'description', 'annotations', 'date', 'revisions', 'submit');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Plan $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function exchangeArray($data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'exchangeArray', array($data));

        return parent::exchangeArray($data);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnalyst()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnalyst', array());

        return parent::getAnalyst();
    }

    /**
     * {@inheritDoc}
     */
    public function setAnalyst(\User\Entity\User $analyst)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAnalyst', array($analyst));

        return parent::setAnalyst($analyst);
    }

    /**
     * {@inheritDoc}
     */
    public function getEffort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEffort', array());

        return parent::getEffort();
    }

    /**
     * {@inheritDoc}
     */
    public function setEffort(\Risk\Entity\PlanEffort $effort)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEffort', array($effort));

        return parent::setEffort($effort);
    }

    /**
     * {@inheritDoc}
     */
    public function getStrategy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStrategy', array());

        return parent::getStrategy();
    }

    /**
     * {@inheritDoc}
     */
    public function setStrategy(\Risk\Entity\PlanStrategy $strategy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStrategy', array($strategy));

        return parent::setStrategy($strategy);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus(\Risk\Entity\PlanStatus $status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getFormatedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFormatedDate', array());

        return parent::getFormatedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', array());

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', array($date));

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnnotations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnnotations', array());

        return parent::getAnnotations();
    }

    /**
     * {@inheritDoc}
     */
    public function setAnnotations($annotations)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAnnotations', array($annotations));

        return parent::setAnnotations($annotations);
    }

    /**
     * {@inheritDoc}
     */
    public function addRevisions(\Doctrine\Common\Collections\Collection $revisions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRevisions', array($revisions));

        return parent::addRevisions($revisions);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRevisions(\Doctrine\Common\Collections\Collection $revisions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRevisions', array($revisions));

        return parent::removeRevisions($revisions);
    }

    /**
     * {@inheritDoc}
     */
    public function getRevisions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRevisions', array());

        return parent::getRevisions();
    }

}
